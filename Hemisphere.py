#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        Hemisphere.py
#
#  Project :     Hemisphere
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sergey.v.babenkov$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["Hemisphere", "HemisphereClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(Hemisphere.additionnal_import) ENABLED START -----#

#----- PROTECTED REGION END -----#	//	Hemisphere.additionnal_import

# Device States Description
# No states for this device


class Hemisphere (PyTango.Device_4Impl):
    """Hemisphere"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Hemisphere.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Hemisphere.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        Hemisphere.init_device(self)
        #----- PROTECTED REGION ID(Hemisphere.__init__) ENABLED START -----#
        self.ISEG = PyTango.DeviceProxy("ktof/logic/lens1")

        self.IS=0.0
        self.IS_factor=0.0
        self.IS_offset=0.0
        
        self.OS=0.0
        self.OS_factor=0.0
        self.OS_offset=0.0
        
        self.X1=0.0
        self.X1_factor=0.0
        self.X1_offset=0.0
        
        self.X2=0.0
        self.X2_factor=0.0
        self.X2_offset=0.0
        
        self.X3=0.0
        self.X3_factor=0.0
        self.X3_offset=0.0

        self.X4=0.0
        self.X4_factor=0.0
        self.X4_offset=0.0
        
        self.G=0.0
        #----- PROTECTED REGION END -----#	//	Hemisphere.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(Hemisphere.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Hemisphere.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_ISEG_conn_read = False
        #----- PROTECTED REGION ID(Hemisphere.init_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Hemisphere.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(Hemisphere.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Hemisphere.always_executed_hook

    # -------------------------------------------------------------------------
    #    Hemisphere read/write attribute methods
    # -------------------------------------------------------------------------
    
    def write_IS_factor(self, attr):
        self.debug_stream("In write_IS_factor()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.IS_factor_write) ENABLED START -----#
        self.IS_factor=data
        self.change_v()
        #----- PROTECTED REGION END -----#	//	Hemisphere.IS_factor_write
        
    def write_OS_factor(self, attr):
        self.debug_stream("In write_OS_factor()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.OS_factor_write) ENABLED START -----#
        self.OS_factor=data
        self.change_v()          
        #----- PROTECTED REGION END -----#	//	Hemisphere.OS_factor_write
        
    def write_X1_factor(self, attr):
        self.debug_stream("In write_X1_factor()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.X1_factor_write) ENABLED START -----#
        self.X1_factor=data
        self.change_v()          
        #----- PROTECTED REGION END -----#	//	Hemisphere.X1_factor_write
        
    def write_X2_factor(self, attr):
        self.debug_stream("In write_X2_factor()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.X2_factor_write) ENABLED START -----#
        self.X2_factor=data
        self.change_v()          
        #----- PROTECTED REGION END -----#	//	Hemisphere.X2_factor_write
        
    def write_X3_factor(self, attr):
        self.debug_stream("In write_X3_factor()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.X3_factor_write) ENABLED START -----#
        self.X3_factor=data
        self.change_v()          
        #----- PROTECTED REGION END -----#	//	Hemisphere.X3_factor_write
        
    def write_X4_factor(self, attr):
        self.debug_stream("In write_X4_factor()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.X4_factor_write) ENABLED START -----#
        self.X4_factor=data
        self.change_v()          
        #----- PROTECTED REGION END -----#	//	Hemisphere.X4_factor_write
        
    def write_IS_offset(self, attr):
        self.debug_stream("In write_IS_offset()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.IS_offset_write) ENABLED START -----#
        self.IS_offset=data
        self.change_v()          
        #----- PROTECTED REGION END -----#	//	Hemisphere.IS_offset_write
        
    def write_OS_offset(self, attr):
        self.debug_stream("In write_OS_offset()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.OS_offset_write) ENABLED START -----#
        self.OS_offset=data
        self.change_v()          
        #----- PROTECTED REGION END -----#	//	Hemisphere.OS_offset_write
        
    def write_X1_offset(self, attr):
        self.debug_stream("In write_X1_offset()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.X1_offset_write) ENABLED START -----#
        self.X1_offset=data
        self.change_v()          
        #----- PROTECTED REGION END -----#	//	Hemisphere.X1_offset_write
        
    def write_X2_offset(self, attr):
        self.debug_stream("In write_X2_offset()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.X2_offset_write) ENABLED START -----#
        self.X2_offset=data
        self.change_v()          
        #----- PROTECTED REGION END -----#	//	Hemisphere.X2_offset_write
        
    def write_X3_offset(self, attr):
        self.debug_stream("In write_X3_offset()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.X3_offset_write) ENABLED START -----#
        self.X3_offset=data
        self.change_v()          
        #----- PROTECTED REGION END -----#	//	Hemisphere.X3_offset_write
        
    def write_X4_offset(self, attr):
        self.debug_stream("In write_X4_offset()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.X4_offset_write) ENABLED START -----#
        self.X4_offset=data
        self.change_v()      
        #----- PROTECTED REGION END -----#	//	Hemisphere.X4_offset_write
        
    def write_G(self, attr):
        self.debug_stream("In write_G()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.G_write) ENABLED START -----#
        self.G=data
        self.change_v()
        #----- PROTECTED REGION END -----#	//	Hemisphere.G_write
        
    def read_ISEG_conn(self, attr):
        self.debug_stream("In read_ISEG_conn()")
        #----- PROTECTED REGION ID(Hemisphere.ISEG_conn_read) ENABLED START -----#
        attr.set_value(self.attr_ISEG_conn_read)
        
        #----- PROTECTED REGION END -----#	//	Hemisphere.ISEG_conn_read
        
    def write_ISEG_conn(self, attr):
        self.debug_stream("In write_ISEG_conn()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Hemisphere.ISEG_conn_write) ENABLED START -----#
        self.attr_ISEG_conn_read=data
        #----- PROTECTED REGION END -----#	//	Hemisphere.ISEG_conn_write
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(Hemisphere.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Hemisphere.read_attr_hardware


    # -------------------------------------------------------------------------
    #    Hemisphere command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(Hemisphere.programmer_methods) ENABLED START -----#
    def change_v(self):
        self.IS=self.IS_factor*self.G+self.IS_offset
        self.OS=self.OS_factor*self.G+self.OS_offset
        self.X1=self.X1_factor*self.G+self.X1_offset
        self.X2=self.X2_factor*self.G+self.X2_offset
        self.X3=self.X3_factor*self.G+self.X3_offset
        self.X4=self.X4_factor*self.G+self.X4_offset
        
        self.ISEG.write_attribute("G_VUSet",self.G)
        self.ISEG.write_attribute("IS_VUSet",self.IS)
        self.ISEG.write_attribute("OS_VUSet",self.OS)
        self.ISEG.write_attribute("X1_VUSet",self.X1)
        self.ISEG.write_attribute("X2_VUSet",self.X2)
        self.ISEG.write_attribute("X3_VUSet",self.X3)
        self.ISEG.write_attribute("X4_VUSet",self.X4)

            
    #----- PROTECTED REGION END -----#	//	Hemisphere.programmer_methods

class HemisphereClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(Hemisphere.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Hemisphere.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'IS_factor':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'OS_factor':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'X1_factor':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'X2_factor':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'X3_factor':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'X4_factor':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'IS_offset':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'OS_offset':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'X1_offset':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'X2_offset':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'X3_offset':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'X4_offset':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'G':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'ISEG_conn':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(HemisphereClass, Hemisphere, 'Hemisphere')
        #----- PROTECTED REGION ID(Hemisphere.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Hemisphere.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
